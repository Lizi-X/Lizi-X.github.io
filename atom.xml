<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Burj Lizi X</title>
  
  
  <link href="https://burjlizix.com/atom.xml" rel="self"/>
  
  <link href="https://burjlizix.com/"/>
  <updated>2023-10-26T09:41:41.956Z</updated>
  <id>https://burjlizix.com/</id>
  
  <author>
    <name>LIZI FU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sort Algorithm 2 - Quick Sort</title>
    <link href="https://burjlizix.com/2023/10/26/Sort-Algorithm-2-Quick-Sort/"/>
    <id>https://burjlizix.com/2023/10/26/Sort-Algorithm-2-Quick-Sort/</id>
    <published>2023-10-26T10:38:15.000Z</published>
    <updated>2023-10-26T09:41:41.956Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">nums</span>):</span></span><br><span class="line">    low, high = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">    quickSort(nums,low,high)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span>(<span class="params">nums,low,high</span>):</span></span><br><span class="line">    <span class="keyword">if</span> low &lt; high:</span><br><span class="line">        pivotpos = partition(nums,low,high)</span><br><span class="line">        quickSort(nums,low,pivotpos-<span class="number">1</span>)</span><br><span class="line">        quickSort(nums,pivotpos+<span class="number">1</span>,high)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">nums,low,high</span>):</span></span><br><span class="line">    pivot = nums[low]</span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> nums[high] &gt;= pivot:</span><br><span class="line">            high -= <span class="number">1</span></span><br><span class="line">        nums[low] = nums[high]</span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> nums[low] &lt;= pivot:</span><br><span class="line">            low += <span class="number">1</span></span><br><span class="line">        nums[high] = nums[low]</span><br><span class="line">    nums[low] = pivot</span><br><span class="line">    <span class="keyword">return</span> low</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">10</span>, <span class="number">17</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">36</span>, <span class="number">21</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution(nums))</span><br></pre></td></tr></table></figure><p>(1) avarage time cost: T(n) = O(nlogn)<br>(2) avarage time cost: S(n) = S(logn)<br>(3) in-place sort<br>(4) unstable<br>(5) best T(n)= O(nlogn), worst T(n) = O(nlogn)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="data structures and algorithm" scheme="https://burjlizix.com/categories/data-structures-and-algorithm/"/>
    
    
    <category term="sort" scheme="https://burjlizix.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Sort Algorithm 1 - Bubble Sort</title>
    <link href="https://burjlizix.com/2023/10/25/Bubble-Sort/"/>
    <id>https://burjlizix.com/2023/10/25/Bubble-Sort/</id>
    <published>2023-10-25T10:24:09.000Z</published>
    <updated>2023-10-26T09:49:42.994Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span>(<span class="params">nums</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>-i):</span><br><span class="line">            <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">                nums[j], nums[j+<span class="number">1</span>] = nums[j+<span class="number">1</span>], nums[j]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="number">10</span>, <span class="number">17</span>, <span class="number">50</span>, <span class="number">7</span>, <span class="number">30</span>, <span class="number">24</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">36</span>, <span class="number">21</span>]</span><br><span class="line">    <span class="built_in">print</span>(bubbleSort(nums))</span><br></pre></td></tr></table></figure><p>(1) average time cost T(n): O(n^2)<br>(2) average space cost S(n): O(1)<br>(3) in-place sort<br>(4) stable<br>(5) best T(n): O(n); Worst T(n): O(n^2) </p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="data structures and algorithm" scheme="https://burjlizix.com/categories/data-structures-and-algorithm/"/>
    
    
    <category term="sort" scheme="https://burjlizix.com/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>Hexo: Command not found</title>
    <link href="https://burjlizix.com/2023/10/24/Hexo-Command-not-found/"/>
    <id>https://burjlizix.com/2023/10/24/Hexo-Command-not-found/</id>
    <published>2023-10-24T10:13:05.000Z</published>
    <updated>2023-10-24T20:23:27.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p> bash: hexo: command not found</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>Step 1</strong>. Add environment variables<br>    Add <code>D:\Blog\node_modules\.bin</code> to <code>path</code>.<br>    If not working, then step 2.</p><p><strong>Step 2</strong>. install hexo</p><ul><li>go to <code>D:\Blog\</code></li><li>git bash here</li><li>npm i -g hexo-cli</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt; bash: hexo: command not found&lt;/p&gt;
&lt;h2 id=&quot;Solutio</summary>
      
    
    
    
    <category term="hexo" scheme="https://burjlizix.com/categories/hexo/"/>
    
    
    <category term="hexo" scheme="https://burjlizix.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Min Stack, LRU Cache</title>
    <link href="https://burjlizix.com/2023/10/20/Implement-MinStack-MyStack-using-queues-LRU-Cache/"/>
    <id>https://burjlizix.com/2023/10/20/Implement-MinStack-MyStack-using-queues-LRU-Cache/</id>
    <published>2023-10-20T03:41:31.000Z</published>
    <updated>2023-10-18T19:19:34.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Min-Stack"><a href="#Min-Stack" class="headerlink" title="Min Stack"></a>Min Stack</h2><p><a href="https://leetcode.com/problems/min-stack/description/">lc155. Min Stack</a> ($\leftarrow$ click)<br><strong>Description</strong><br>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.<br>Implement the MinStack class:<br>MinStack() initializes the stack object.<br>void push(int val) pushes the element val onto the stack.<br>void pop() removes the element on the top of the stack.<br>int top() gets the top element of the stack.<br>int getMin() retrieves the minimum element in the stack.<br>You must implement a solution with O(1) time complexity for each function.</p><p><strong>Example</strong><br>Example 1:</p><p>Input<br>[“MinStack”,”push”,”push”,”push”,”getMin”,”pop”,”top”,”getMin”]<br>[ [],[-2],[0],[-3],[],[],[],[] ]</p><p>Output<br>[null,null,null,null,-3,null,0,-2]</p><p>Explanation<br>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin(); // return -3<br>minStack.pop();<br>minStack.top();    // return 0<br>minStack.getMin(); // return -2</p><p><strong>Constraints</strong><br>-231 &lt;= val &lt;= 231 - 1<br>Methods pop, top and getMin operations will always be called on non-empty stacks.<br>At most 3 * 104 calls will be made to push, pop, top, and getMin.</p><p><strong>Solution</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.minStack = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, val</span>)：</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">not</span> <span class="title">self</span>.<span class="title">minStack</span>:</span> <span class="comment"># push first element </span></span><br><span class="line">            self.minStack.append((val,val))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.minStack.append((val,<span class="built_in">min</span>(self.minStack[-<span class="number">1</span>][-<span class="number">1</span>],val))) <span class="comment"># push (val, min val)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.minStack.pop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.minStack[-<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.minStack[-<span class="number">1</span>][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h2><p><a href="https://leetcode.com/problems/lru-cache/description/">lc146 LRU Cache</a> ($\leftarrow$ click)<br><strong>Description</strong><br>Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.<br>Implement the LRUCache class:<br>LRUCache(int capacity) Initialize the LRU cache with positive size capacity.<br>int get(int key) Return the value of the key if the key exists, otherwise return -1.<br>void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.<br>The functions get and put must each run in O(1) average time complexity.</p><p><strong>Example</strong><br>Example 1:</p><p>Input<br>[“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br>Output<br>[null, null, null, 1, null, -1, null, -1, 3, 4]</p><p>Explanation<br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // cache is {1=1}<br>lRUCache.put(2, 2); // cache is {1=1, 2=2}<br>lRUCache.get(1);    // return 1<br>lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}<br>lRUCache.get(2);    // returns -1 (not found)<br>lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}<br>lRUCache.get(1);    // return -1 (not found)<br>lRUCache.get(3);    // return 3<br>lRUCache.get(4);    // return 4</p><p><strong>Constraints</strong></p><p>1 &lt;= capacity &lt;= 3000<br>0 &lt;= key &lt;= 104<br>0 &lt;= value &lt;= 105<br>At most 2 * 105 calls will be made to get and put.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRU</span> <span class="title">Cache</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, capacity</span>):</span></span><br><span class="line">        self.cap = capacity</span><br><span class="line">        self.cache = collections.OrderedDict()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.cache:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        self.cache.move_to_end(key)</span><br><span class="line">        <span class="keyword">return</span> self.cache[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.cache:</span><br><span class="line">            self.cache[key] = val</span><br><span class="line">            self.cache.move_to_end(key)</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.key) &gt;= self.cap:</span><br><span class="line">            self.cache.popitem(last=<span class="literal">False</span>)</span><br><span class="line">        self.cache[key] = val</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">lc155 Min Stack, lc225 Implement Stack using Queues, lc146 LRU Cache</summary>
    
    
    
    <category term="Data Structures and Algorithms" scheme="https://burjlizix.com/categories/Data-Structures-and-Algorithms/"/>
    
    
    <category term="stack" scheme="https://burjlizix.com/tags/stack/"/>
    
    <category term="queues" scheme="https://burjlizix.com/tags/queues/"/>
    
    <category term="linked list" scheme="https://burjlizix.com/tags/linked-list/"/>
    
    <category term="class" scheme="https://burjlizix.com/tags/class/"/>
    
  </entry>
  
  <entry>
    <title>Design Stack and Queue</title>
    <link href="https://burjlizix.com/2023/10/19/Design-Stack-and-Queue/"/>
    <id>https://burjlizix.com/2023/10/19/Design-Stack-and-Queue/</id>
    <published>2023-10-19T05:48:28.000Z</published>
    <updated>2023-10-18T19:15:27.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implement-Stack-using-Queue"><a href="#Implement-Stack-using-Queue" class="headerlink" title="Implement Stack using Queue"></a>Implement Stack using Queue</h2><p><a href="https://leetcode.com/problems/implement-stack-using-queues/description/">lc225 Implement Stack using Queues</a> ($\leftarrow$ click)<br>Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).<br>Implement a last-in-first-out (LIFO) stack using only one queue.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.que = collections.deque()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(N), S(n) = S(N)</span></span><br><span class="line">        n = <span class="built_in">len</span>(self.que)</span><br><span class="line">        self.que.append(x)</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            self.que.append(self.que.popleft())</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        <span class="keyword">return</span> self.que.popleft()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        <span class="keyword">return</span> self.que[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.que</span><br></pre></td></tr></table></figure><h2 id="Implement-Queue-using-Stacks"><a href="#Implement-Queue-using-Stacks" class="headerlink" title="Implement Queue using Stacks"></a>Implement Queue using Stacks</h2><p><a href="https://leetcode.com/problems/implement-queue-using-stacks/description/">lc 232 Implement Queue using Stacks</a> ($\leftarrow$ click)<br>Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.stIn = []</span><br><span class="line">        self.stOut = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self,x</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        self.stIn.append(x)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># amortized T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        top = self.peek() <span class="comment"># have to call self.peek() to modify self.stOut first.</span></span><br><span class="line">        self.stOut.pop()</span><br><span class="line">        <span class="keyword">return</span> top</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># amortized T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        <span class="keyword">if</span> self.stOut: <span class="keyword">return</span> self.stOut[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.stIn: <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> self.stIn:</span><br><span class="line">            self.stOut.append(self.stIn.pop())</span><br><span class="line">        <span class="keyword">return</span> self.stOut[-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isEmpty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="comment"># T(n) = O(1), S(n) = S(N)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.stIn <span class="keyword">and</span> <span class="keyword">not</span> self.stOut</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Note: The peek() and pop() functions require a total reversal of N elements in N consecutive front element deletion operations, leading to an amortized time complexity of O(1).</p>]]></content>
    
    
    <summary type="html">lc225 Implement Stack using Queues, lc232 Implement Queue using Stacks</summary>
    
    
    
    <category term="Data Structures and Algorithms" scheme="https://burjlizix.com/categories/Data-Structures-and-Algorithms/"/>
    
    
    <category term="stack" scheme="https://burjlizix.com/tags/stack/"/>
    
    <category term="queue" scheme="https://burjlizix.com/tags/queue/"/>
    
  </entry>
  
  <entry>
    <title>Stack</title>
    <link href="https://burjlizix.com/2023/10/15/Stack/"/>
    <id>https://burjlizix.com/2023/10/15/Stack/</id>
    <published>2023-10-15T10:48:58.000Z</published>
    <updated>2023-10-18T19:15:27.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Implementation-by-list"><a href="#Implementation-by-list" class="headerlink" title="Implementation by list"></a>Implementation by list</h2><p>Stack:  linear data structure with Last in first out (LIFO).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">st = [<span class="number">1</span>, <span class="number">2</span> , <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># push: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">st.append(<span class="number">60</span>) <span class="comment"># output: st = [1, 2 , 3, 4, 5, 60]</span></span><br><span class="line">st.append(<span class="number">70</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pop/top/peek: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">peekElement = st.pop() <span class="comment"># output: peakElement = 70, st = [1, 2 , 3, 4, 5, 60] </span></span><br><span class="line">st.pop() <span class="comment"># st = [1, 2 , 3, 4, 5] </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># size: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">size = <span class="built_in">len</span>(st)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Implementation-by-deque"><a href="#Implementation-by-deque" class="headerlink" title="Implementation by deque"></a>Implementation by deque</h2><p>Deque: Doubly Ended Queue. Enable operations from both the ends of the container, which means deque can implement both stack and queue. In python, deque is from module “collections”.</p><p><strong>When T(n) = O(1), S(n) = S(1). *6</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line">de = collections.deque([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. right push: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">de.append(<span class="number">60</span>) <span class="comment"># output: de = deque([1,2,3,4,5,60])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. left push: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">de.appendleft(-<span class="number">0.2</span>) <span class="comment"># output: de = deque([-0.2,1,2,3,4,5,60])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. right pop: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">r = de.pop() <span class="comment"># r: 60, de = deque([-0.2,1,2,3,4,5])</span></span><br><span class="line">de.pop() <span class="comment"># de = deque([-0.2,1,2,3,4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. left pop: T(n) = O(1), S(n) = S(1)</span></span><br><span class="line">l = de.popleft() <span class="comment"># l: -0.2, de = deque([1,2,3,4])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. size: T(n) = O(1), S(n) = S(1) </span></span><br><span class="line"><span class="built_in">len</span> = <span class="built_in">len</span>(de)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. get front and back item of deque: T(n) = O(1), S(n) = S(1) </span></span><br><span class="line">front = de[<span class="number">0</span>] <span class="comment"># front = 1</span></span><br><span class="line">back = de[-<span class="number">1</span>] <span class="comment"># back = 4</span></span><br></pre></td></tr></table></figure><br><p><strong>When T(n) = O(N), S(n) = S(1). *5</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">de = collections.deque([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. index: get the first occurrence of element. T(n) = O(N), S(n) = S(1)</span></span><br><span class="line">idx = de.index(<span class="number">20</span>) <span class="comment"># idx = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. insert: insert(pos, val). T(n) = O(N), S(n) = S(1)</span></span><br><span class="line">de. insert(<span class="number">3</span>,<span class="number">50</span>) <span class="comment"># de = deque([10, 20, 30, 50, 20, 40, 50]) . insert the value 50 at 4th position (there&#x27;re 3 elements before inserted value).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. remove： remove the first occurrence of element. T(n) = O(N), S(n) = S(1)</span></span><br><span class="line">de.remove(<span class="number">50</span>) <span class="comment"># de = deque([10, 20, 30, 20, 40, 50])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. count: count the occurrences of element. T(n) = O(N), S(n) = S(1)</span></span><br><span class="line">c = de.count(<span class="number">20</span>) <span class="comment"># c = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. reverse: reverse deque (in-place). T(n) = O(N), S(n) = S(1)</span></span><br><span class="line">de.reverse() <span class="comment"># de = deque([50, 40, 20, 30, 20, 10])</span></span><br></pre></td></tr></table></figure><br><p><strong>When T(n) = O(K), S(n) = S(1). *3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line">de = collections.deque([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. extend: push multiple elements in the back/right. </span></span><br><span class="line">de.extend([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]) <span class="comment"># de = deque([10, 20, 30, 20, 40, 50, 6, 7, 8]). T(n) = T(3), S(n) = S(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. extendleft: push multiple elements in the front/left. T(n) = T(2), S(n) = S(1)</span></span><br><span class="line">de.extendleft([-<span class="number">400</span>, -<span class="number">300</span>]) <span class="comment"># de = deque([-300, -400, 10, 20, 30, 20, 40, 50, 6, 7, 8]). </span></span><br><span class="line"><span class="comment"># Pay attention to the order of -300 and -400.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. rotate: rotate the deque by k (if k&gt;0 rotate to right, elif k&lt;0 rotate to left)</span></span><br><span class="line">de.rotate(<span class="number">5</span>) <span class="comment"># de = deque([40, 50, 6, 7, 8,-300, -400, 10, 20, 30, 20]). # slide 5 elements to the right. # T(n) = T(5), S(n) = S(1)</span></span><br><span class="line">de.rotate(-<span class="number">2</span>) <span class="comment"># de = deque([6, 7, 8, -300, -400, 10, 20, 30, 20, 40, 50]). # slide 2 elements to the left. # T(n) = T(2), S(n) = S(1)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">stack, deque</summary>
    
    
    
    <category term="Data Structures and Algorithms" scheme="https://burjlizix.com/categories/Data-Structures-and-Algorithms/"/>
    
    
    <category term="Stack" scheme="https://burjlizix.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Binary Search I</title>
    <link href="https://burjlizix.com/2023/10/12/Binary-Search-I/"/>
    <id>https://burjlizix.com/2023/10/12/Binary-Search-I/</id>
    <published>2023-10-12T00:01:42.000Z</published>
    <updated>2023-10-18T19:15:54.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Basic-Scenario"><a href="#Basic-Scenario" class="headerlink" title="Basic Scenario"></a>Basic Scenario</h2><p>Find the index of a <strong>target matching</strong> element in a <strong>sorted</strong> (either ascending or non-increasing) array.</p><h2 id="Classic-examples"><a href="#Classic-examples" class="headerlink" title="Classic examples"></a>Classic examples</h2><p> <strong><a href="https://leetcode.com/problems/binary-search/description/">lc 704 Search target</a></strong> </p><p>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.</p><p>You must write an algorithm with O(log n) runtime complexity.</p><p>Example 1:<br>Input: nums = [-1,0,3,5,9,12], target = 9<br>Output: 4<br>Explanation: 9 exists in nums and its index is 4</p><p>Example 2:<br>Input: nums = [-1,0,3,5,9,12], target = 2<br>Output: -1<br>Explanation: 2 does not exist in nums so return -1</p><p>Constraints:<br>1 &lt;= nums.length &lt;= 104<br>-104 &lt; nums[i], target &lt; 104<br>All the integers in nums are unique.<br>nums is sorted in ascending order.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span>(<span class="params">nums,target</span>):</span></span><br><span class="line">    l,r = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r: <span class="comment">#*</span></span><br><span class="line">        mid = (l+r)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">            r = mid - <span class="number">1</span> <span class="comment">#*</span></span><br><span class="line">        <span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">            l = mid + <span class="number">1</span> <span class="comment">#*</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><br><p> <strong><a href="https://leetcode.com/problems/search-insert-position/description/">lc 35 Insert target</a></strong><br>search ends at l = r+1, so finally return l if not found (or r+1).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span>(<span class="params">nums,target</span>):</span></span><br><span class="line">    l,r = <span class="number">0</span>, <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> l&lt;=r:</span><br><span class="line">        mid = (l+r)//<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> nums[mid]&lt; target:</span><br><span class="line">            l = mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[mid] &gt; target:</span><br><span class="line">            r = mid-<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> l <span class="comment">#*</span></span><br></pre></td></tr></table></figure><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary:"></a>Summary:</h2><ol><li>Both arrays are in an ascending order (no duplicates).</li><li>There are usually two representations for intervals: <code>[left, right]</code> and <code>[left, right)</code>. I prefer the former, so all the binary search code in blogs is based on the <code>[left, right]</code> format.</li></ol><p>Next blog: How to find left and right borders of target in a non-inscreading array. How to search target in unsual array.</p>]]></content>
    
    
    <summary type="html">Basic understanding of binary search. lc 704, lc 35.</summary>
    
    
    
    <category term="Data Structures and Algorithms" scheme="https://burjlizix.com/categories/Data-Structures-and-Algorithms/"/>
    
    
    <category term="algorithm" scheme="https://burjlizix.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Find Object Elements</title>
    <link href="https://burjlizix.com/2023/09/24/Find-Object-Element/"/>
    <id>https://burjlizix.com/2023/09/24/Find-Object-Element/</id>
    <published>2023-09-24T13:51:04.000Z</published>
    <updated>2023-10-18T02:11:12.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Find-primitives-elements"><a href="#Find-primitives-elements" class="headerlink" title="Find primitives elements"></a>Find primitives elements</h2><p>First, when elements of array are primitive types:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numbers.includes(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// also works: console.log(numbers.indexOf(1) !== -1);</span></span><br></pre></td></tr></table></figure><h2 id="Find-references-elements"><a href="#Find-references-elements" class="headerlink" title="Find references elements"></a>Find references elements</h2><h3 id="Includes-method"><a href="#Includes-method" class="headerlink" title="Includes method"></a><code>Includes</code> method</h3><p>When elements of array are reference types, it is not correct to use <code>.includes()</code>. Because the object passed to includes methods and the object in courses are two different objects. They have two different references in two different locations of memory.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> courses = [</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;JavaScript&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;Python&#x27;</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(courses.includes(&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;JavaScript&#x27;</span>&#125;)); <span class="comment">// false </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Find-method"><a href="#Find-method" class="headerlink" title="Find method"></a><code>Find</code> method</h3><p>The solution is <code>.find()</code>:</p><ul><li><p>version 1: use <code>.find()</code> instead of <code>.includes()</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = courses.find(<span class="function"><span class="keyword">function</span>(<span class="params">course</span>)</span>&#123; <span class="comment">// callback function</span></span><br><span class="line">    <span class="keyword">return</span> course.name===<span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(course); <span class="comment">// &#123;id: 1, name: &#x27;JavaScript&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>version 2: arrow function + short for single parameter<br>Use arrow function to replace  <code>function(param)</code>. Use <code>course=&gt;&#123;&#125;</code> to replace <code>(course)=&gt;&#123;&#125;</code> ,removing bracket because of single parameter. <br></p><p> <code>(param1, param2, param3)=&gt;&#123;&#125;, singeParam=&gt;&#123;&#125;, ()=&gt;&#123;&#125;</code>.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> course = courses.find(<span class="function"><span class="params">course</span>=&gt;</span>&#123; <span class="comment">// arrow function</span></span><br><span class="line">    <span class="comment">// other statements</span></span><br><span class="line">    <span class="keyword">return</span> course.name===<span class="string">&#x27;JavaScript&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(course); <span class="comment">// &#123;id: 1, name: &#x27;JavaScript&#x27;&#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>version 3: short for singe return (without any other statements)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> course = courses.find(<span class="function"><span class="params">course</span> =&gt;</span> course.name === <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(course); <span class="comment">// &#123;id: 1, name: &#x27;JavaScript&#x27;&#125; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Description-of-find"><a href="#Description-of-find" class="headerlink" title="Description of  find()"></a>Description of  <code>find()</code></h2><p><code>find()</code> returns the value of the first element in the array that satisfies the provided testing function. Otherwise undefined is returned. For example. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>,<span class="number">130</span>, <span class="number">44</span>]</span><br><span class="line"><span class="keyword">let</span> found = array1.find(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123; <span class="comment">// pass every element of array1 to function </span></span><br><span class="line"><span class="comment">// and check until finding the one, then return the element or undefined (if no element satisfied).</span></span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(found); <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> foundModify = array1.find(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foundModify); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>If elements of array belong to primitive types, use <code>array.includes()</code>; Else if belonging to reference types, use  <code>array.find()</code> and callback function.</p><p>Thanks for @<a href="https://www.youtube.com/@programmingwithmosh">Mosh</a>‘s great video tutorials.</p>]]></content>
    
    
    <summary type="html">array, object, references, callback function, arrow function</summary>
    
    
    
    <category term="Software Development" scheme="https://burjlizix.com/categories/Software-Development/"/>
    
    
    <category term="JavaScript" scheme="https://burjlizix.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Object</title>
    <link href="https://burjlizix.com/2023/09/18/JavaScript-Object/"/>
    <id>https://burjlizix.com/2023/09/18/JavaScript-Object/</id>
    <published>2023-09-18T10:19:56.000Z</published>
    <updated>2023-10-15T23:52:31.376Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Create object</li><li>Factory funnction</li><li>Construtor function</li><li>Operate object properties and methods</li><li>Enumerating object</li><li>Clone object</li><li>Garbage collector</li><li>Template literals</li><li>Math, String, Date<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object-oriented programming (OOP)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle0 = &#123;</span><br><span class="line">    <span class="attr">radius</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">location</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isVisible</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">draw</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;draw&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">circle0.draw(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// factory functions: create objects. Camel notation</span></span><br><span class="line"><span class="comment">// function createCircle(radius)&#123;</span></span><br><span class="line"><span class="comment">//     const circle = &#123;</span></span><br><span class="line"><span class="comment">//         radius: radius,</span></span><br><span class="line"><span class="comment">//         draw: function() &#123;</span></span><br><span class="line"><span class="comment">//             console.log(&#x27;draw1&#x27;);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"><span class="comment">//     return circle;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">radius</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        radius,</span><br><span class="line">        <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;draw2&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> circle1 = createCircle(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(circle1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor function. Pascal Notation.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius <span class="comment">// this: represents an empty object</span></span><br><span class="line">    <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;draw&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> circle2 = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// enumerating properties of an object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;=====enumerating of object&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> circle2)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,circle2[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(circle2))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> <span class="built_in">Object</span>.entries(circle2))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clone object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;====clone oject&quot;</span>);</span><br><span class="line"><span class="comment">/* const another = &#123;&#125;;</span></span><br><span class="line"><span class="comment">for (let key in circle2)&#123;</span></span><br><span class="line"><span class="comment">    another[key] = circle2[key];</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* const another = Object.assign(&#123;&#125;,circle2); */</span></span><br><span class="line"><span class="keyword">const</span> another = &#123;...circle2&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(another)</span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;----add/delete properties and methods&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> circle3 = &#123;</span><br><span class="line">    <span class="attr">radius</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">location</span>: &#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isVisible</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">draw</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;draw&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">circle3.color = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line">circle3.move = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(circle3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> circle3.color;</span><br><span class="line"><span class="keyword">delete</span> circle3.move;</span><br><span class="line"><span class="built_in">console</span>.log(circle3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constructor property: every object has a constructor property. </span></span><br><span class="line"><span class="comment">//that references the function that was used to create the object.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// in js, functions are objects</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gabarge collecter: automatically</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// math</span></span><br><span class="line"><span class="comment">// string: two types</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// template literals 模板语法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;----template literals&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;Chandler&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> anotherMessage = </span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span> <span class="subst">$&#123;<span class="number">3</span>+<span class="number">3</span>&#125;</span>,</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Thanks for your book &#x27;Little Woman&#x27;, I like it so much!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Best,</span></span><br><span class="line"><span class="string">Monica</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(anotherMessage);</span><br><span class="line"></span><br><span class="line"><span class="comment">// date</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;----date&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="built_in">console</span>.log(now.toDateString());</span><br><span class="line"><span class="built_in">console</span>.log(now.toTimeString());</span><br></pre></td></tr></table></figure></li></ul><p>Thanks for @<a href="https://www.youtube.com/@programmingwithmosh">Mosh</a>‘s great video tutorials.</p>]]></content>
    
    
    <summary type="html">Introduction of JavaScript object, such as object properties and methods, factory function, constructor function, this, etc..</summary>
    
    
    
    <category term="Software Development" scheme="https://burjlizix.com/categories/Software-Development/"/>
    
    
    <category term="JavaScript" scheme="https://burjlizix.com/tags/JavaScript/"/>
    
    <category term="OOP" scheme="https://burjlizix.com/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to JavaScript III</title>
    <link href="https://burjlizix.com/2023/09/11/Introduction-to-JavaScript-III/"/>
    <id>https://burjlizix.com/2023/09/11/Introduction-to-JavaScript-III/</id>
    <published>2023-09-11T10:47:19.000Z</published>
    <updated>2023-10-18T02:11:26.296Z</updated>
    
    <content type="html"><![CDATA[<p>Primitives are copied by their value.<br>Objects are copied by their reference(memory address)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;----primitives&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> number = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increase</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">    number++;</span><br><span class="line">    <span class="built_in">console</span>.log(number); <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">increase(number);</span><br><span class="line"><span class="built_in">console</span>.log(number); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;----references&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">value</span>:<span class="number">10</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increaseObj</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    obj.value++;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.value) <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br><span class="line">increaseObj(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 11</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Thanks for @<a href="https://www.youtube.com/@programmingwithmosh">Mosh</a>‘s great video tutorials.</p>]]></content>
    
    
    <summary type="html">Primitives vs References</summary>
    
    
    
    <category term="Software Development" scheme="https://burjlizix.com/categories/Software-Development/"/>
    
    
    <category term="JavaScript" scheme="https://burjlizix.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to JavaScript II</title>
    <link href="https://burjlizix.com/2023/09/06/Introduction-to-JavaScript-II/"/>
    <id>https://burjlizix.com/2023/09/06/Introduction-to-JavaScript-II/</id>
    <published>2023-09-06T10:47:14.000Z</published>
    <updated>2023-10-18T02:11:32.717Z</updated>
    
    <content type="html"><![CDATA[<ul><li>if-else</li><li>switch case</li><li>for</li><li>for…in</li><li>for…of</li><li>while</li><li>do…while</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// conditional statements</span></span><br><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="keyword">let</span> hour = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span> (hour &gt;= <span class="number">6</span> &amp;&amp; hour &lt;= <span class="number">12</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Good morning!&quot;</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (hour &gt; <span class="number">12</span> &amp;&amp; hour &lt;= <span class="number">18</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Good afternoon!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Good evening!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch case</span></span><br><span class="line"><span class="keyword">let</span> role = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line"><span class="keyword">switch</span> (role)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;guest&#x27;</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Guest User&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;moderator&#x27;</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Moderator User&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;Unknown User&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* // loops * 5</span></span><br><span class="line"><span class="comment">// for; while; do...while;for...in;for...of */</span></span><br><span class="line"><span class="comment">// for </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;for loop:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">2</span> !== <span class="number">0</span>) <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;while loop:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i%<span class="number">2</span> !==<span class="number">0</span>) <span class="built_in">console</span>.log(i);</span><br><span class="line">    i++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do-while</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;do-while loop:&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">2</span> !==<span class="number">0</span> ) <span class="built_in">console</span>.log(j);</span><br><span class="line">    j++;</span><br><span class="line">&#125; <span class="keyword">while</span> (j &lt;= <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// words (condition)&#123;</span></span><br><span class="line"><span class="comment">//     statement</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for .. in: iterate all properties of object or all index of array elements.</span></span><br><span class="line"><span class="keyword">const</span> person1 = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Joey&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key,person[key]); <span class="comment">// cannot use person.key</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colors = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">in</span> colors)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index,colors[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of: iterate atoms of array</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> color <span class="keyword">of</span> colors)</span><br><span class="line">    <span class="built_in">console</span>.log(color)</span><br><span class="line"></span><br><span class="line"><span class="comment">// break: end the whole loop</span></span><br><span class="line"><span class="comment">// continue: end current loop</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Thanks for @<a href="https://www.youtube.com/@programmingwithmosh">Mosh</a>‘s great video tutorials.</p>]]></content>
    
    
    <summary type="html">Flow Control</summary>
    
    
    
    <category term="Software Development" scheme="https://burjlizix.com/categories/Software-Development/"/>
    
    
    <category term="JavaScript" scheme="https://burjlizix.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Introduction to JavaScript I</title>
    <link href="https://burjlizix.com/2023/09/01/Introduction-to-JavaScript/"/>
    <id>https://burjlizix.com/2023/09/01/Introduction-to-JavaScript/</id>
    <published>2023-09-01T10:44:31.000Z</published>
    <updated>2023-10-18T02:11:37.592Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Run</li><li>Declare</li><li>Variables vs constants</li><li>Primitives*6<br>string, number, boolean, undefined, null, symbol</li><li>References*3<br>object, array, function</li><li>Basics of array, string, function</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// run: in browser or node</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;hello world!&quot;</span>); </span><br><span class="line"><span class="comment">// node index.js // run in node</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// variable</span></span><br><span class="line"><span class="comment">// use let to declare a variable</span></span><br><span class="line"><span class="keyword">let</span> name <span class="comment">//undefined</span></span><br><span class="line">name = <span class="string">&quot;Chandler&quot;</span>; </span><br><span class="line"> <span class="built_in">console</span>.log(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// constants, don&#x27;t need to assign</span></span><br><span class="line"><span class="keyword">const</span> interestRate = <span class="number">0.3</span>; </span><br><span class="line"><span class="comment">// interestRate = 1;</span></span><br><span class="line"><span class="built_in">console</span>.log(interestRate);</span><br><span class="line"></span><br><span class="line"><span class="comment">// primitive/value types * 6</span></span><br><span class="line"><span class="comment">// string, number, boolean, undefined, null, symbol. primitive types don&#x27;t have properties and methods, only object types do.</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;Monica&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">30</span>; <span class="comment">// don&#x27;t have float numbers or integers, all are number type</span></span><br><span class="line"><span class="keyword">let</span> isApproved = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> lastName; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> middleName = <span class="literal">null</span>; <span class="comment">// type: object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dynamic typing</span></span><br><span class="line"><span class="comment">// type of variable can be changed.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* // refrence types * 3</span></span><br><span class="line"><span class="comment">// object, array, function */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//object</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Ross&#x27;</span>, <span class="comment">// property</span></span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// dot notation</span></span><br><span class="line">person.name = <span class="string">&quot;Rachel&quot;</span>;</span><br><span class="line"><span class="comment">// bracket notation</span></span><br><span class="line">person[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;Emma&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> selection = <span class="string">&quot;name&quot;</span>;</span><br><span class="line">person[selection] = <span class="string">&quot;Pheabe&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person)</span><br><span class="line"></span><br><span class="line"><span class="comment">// arrays</span></span><br><span class="line"><span class="keyword">let</span> selectColors = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>]; <span class="comment">// type: object</span></span><br><span class="line">selectColors[<span class="number">2</span>] = <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line">selectColors[<span class="number">3</span>] = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(selectColors);</span><br><span class="line"><span class="built_in">console</span>.log(selectColors.length);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(selectColors));</span><br><span class="line"></span><br><span class="line"><span class="comment">// functions</span></span><br><span class="line"><span class="comment">// function is a set of statements that either performs a task or calculate and returns a value.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">firstName,lastName</span>)</span>&#123; <span class="comment">// name: parameter</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span> + firstName + <span class="string">&#x27; &#x27;</span> + lastName);</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// do not need to terminate with ;</span></span><br><span class="line">greet(<span class="string">&#x27;Joey&#x27;</span>); <span class="comment">// argument</span></span><br><span class="line">greet(<span class="string">&#x27;Chandler&#x27;</span>,<span class="string">&#x27;Bing&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculating a value</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">number</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> number*number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> number = square(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// string primitive</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> message)</span><br><span class="line"><span class="comment">// string object</span></span><br><span class="line"><span class="keyword">const</span> another = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> another)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Thanks for @<a href="https://www.youtube.com/@programmingwithmosh">Mosh</a>‘s great video tutorials.</p>]]></content>
    
    
    <summary type="html">variables, constants</summary>
    
    
    
    <category term="Software Development" scheme="https://burjlizix.com/categories/Software-Development/"/>
    
    
    <category term="JavaScript" scheme="https://burjlizix.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm</title>
    <link href="https://burjlizix.com/2023/05/24/Algorithm-day1/"/>
    <id>https://burjlizix.com/2023/05/24/Algorithm-day1/</id>
    <published>2023-05-24T01:06:20.000Z</published>
    <updated>2023-10-18T19:16:03.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lc-704-Binary-Search"><a href="#lc-704-Binary-Search" class="headerlink" title="lc 704: Binary Search"></a>lc 704: Binary Search</h2><p><a href="">Program description</a><br>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.<br>You must write an algorithm with O(log n) runtime complexity.</p><p>Example 1:<br>    Input: nums = [-1,0,3,5,9,12], target = 9<br>    Output: 4<br>    Explanation: 9 exists in nums and its index is 4</p><p>Constraints:<br>    1 &lt;= nums.length &lt;= 104<br>    -104 &lt; nums[i], target &lt; 104<br>    All the integers in nums are unique.<br>    nums is sorted in ascending order.</p><p>Solution 1: left close, right close</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = (left+right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">                right = mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">                left = mid+<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>Solution 1: left close, right open</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        right = <span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = (left+right) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="lc-27-Remove-Element"><a href="#lc-27-Remove-Element" class="headerlink" title="lc 27: Remove Element"></a>lc 27: Remove Element</h2><p><a href="https://leetcode.com/problems/remove-element/">Problem description</a></p><p>solution:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElement</span>(<span class="params">self, nums: <span class="type">List</span>[<span class="built_in">int</span>], val: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        slow = <span class="number">0</span></span><br><span class="line">        fast = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> fast &lt; <span class="built_in">len</span>(nums):</span><br><span class="line">            <span class="keyword">if</span> nums[fast] != val:</span><br><span class="line">                nums[slow] = nums[fast]</span><br><span class="line">                slow += <span class="number">1</span></span><br><span class="line">            fast += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">leetcode 704 - Binary Search, leetcode 27 - Remove Element.</summary>
    
    
    
    <category term="Data Structures and Algorithms" scheme="https://burjlizix.com/categories/Data-Structures-and-Algorithms/"/>
    
    
    <category term="algorithm" scheme="https://burjlizix.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Import Python File Like Module</title>
    <link href="https://burjlizix.com/2022/05/04/Import-Python-File-Like-Module/"/>
    <id>https://burjlizix.com/2022/05/04/Import-Python-File-Like-Module/</id>
    <published>2022-05-04T02:41:17.000Z</published>
    <updated>2022-05-04T03:08:10.412Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]<br><img src="https://live.staticflickr.com/65535/52047841007_586f357720.jpg" alt="Content"></p><h2 id="1-Intro"><a href="#1-Intro" class="headerlink" title="1 Intro"></a>1 Intro</h2><p>We have a hierachy of python files as follows. We will introduce how to import .py file like a module in four different situations.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|--- parent_dir</span><br><span class="line">    |--- parent_file.py</span><br><span class="line">    |--- parent_test.py</span><br><span class="line">    |--- sub_dir1</span><br><span class="line">        |--- sub_file.py</span><br><span class="line">    |--- sub_dir2</span><br><span class="line">        |--- sub_test.py</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In parent_file.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># function in parent_file.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parent_fun</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is a function from parent_file&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>In sub_file.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># function in parent_file.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_fun</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This is a function from sub_file&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--content--><h2 id="2-Import-from-same-directory"><a href="#2-Import-from-same-directory" class="headerlink" title="2 Import from same directory"></a>2 Import from same directory</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|--- parent_dir</span><br><span class="line">    |--- **parent_file.py**</span><br><span class="line">    |--- **parent_test.py**</span><br><span class="line">    |--- sub_dir1</span><br><span class="line">        |--- sub_file.py</span><br><span class="line">    |--- sub_dir2</span><br><span class="line">        |--- sub_test.py</span><br></pre></td></tr></table></figure><p>We will write codes in <strong>parent_test.py</strong> to use the function in <strong>parent_file.py</strong><br>Method 1: import xxx.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> parent_file</span><br><span class="line">parent_file.parent_fun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Method 2: from xxx.py import function </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parent_test.py</span></span><br><span class="line"><span class="keyword">from</span> parent_file <span class="keyword">import</span> parent_fun</span><br><span class="line">parent_fun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-Import-from-sub-directory"><a href="#3-Import-from-sub-directory" class="headerlink" title="3 Import from sub directory"></a>3 Import from sub directory</h2><p>We will write codes in <strong>parent_test.py</strong> to use the function in <strong>sub_file.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|--- parent_dir</span><br><span class="line">    |--- parent_file.py</span><br><span class="line">    |--- **parent_test.py**</span><br><span class="line">    |--- sub_dir1</span><br><span class="line">        |--- **sub_file.py**</span><br><span class="line">    |--- sub_dir2</span><br><span class="line">        |--- sub_test.py</span><br></pre></td></tr></table></figure><p>Method: from dir import xxx.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parent_test.py</span></span><br><span class="line"><span class="keyword">from</span> sub_dir1 <span class="keyword">import</span> sub_file</span><br><span class="line">sub_file.sub_fun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-Import-from-parent-directory"><a href="#4-Import-from-parent-directory" class="headerlink" title="4 Import from parent directory"></a>4 Import from parent directory</h2><p>We will write codes in <strong>sub_test.py</strong> to use the function in <strong>parent_file.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|--- parent_dir</span><br><span class="line">    |--- **parent_file**.py</span><br><span class="line">    |--- parent_test.py</span><br><span class="line">    |--- sub_dir1</span><br><span class="line">        |--- sub_file.py</span><br><span class="line">    |--- sub_dir2</span><br><span class="line">        |--- **sub_test**.py</span><br></pre></td></tr></table></figure><p>Method: Change curent path to parent dir (target dir)<br>Tips: If you run the code in terminal, swith the path to sub_dir2 (The dir of your sub_test.py in).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parent_test.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Method 1</span></span><br><span class="line"><span class="keyword">import</span> parent_file</span><br><span class="line">parent_file.parent_fun()</span><br><span class="line"></span><br><span class="line"><span class="comment">## Method 2 </span></span><br><span class="line"><span class="keyword">from</span> parent_file <span class="keyword">import</span> parent_fun</span><br><span class="line">parent_fun()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-Import-from-neighbor-directory"><a href="#5-Import-from-neighbor-directory" class="headerlink" title="5 Import from neighbor directory"></a>5 Import from neighbor directory</h2><p>We will write codes in <strong>sub_test.py</strong> to use the function in <strong>sub_file.py</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">|--- parent_dir</span><br><span class="line">    |--- parent_file.py</span><br><span class="line">    |--- parent_test.py</span><br><span class="line">    |--- sub_dir1</span><br><span class="line">        |--- **sub_file**.py</span><br><span class="line">    |--- sub_dir2</span><br><span class="line">        |--- **sub_test**.py</span><br></pre></td></tr></table></figure><p>Method: The same as part 4. Change curent path to parent dir.<br>Tips: If you run the code in terminal, swith the path to sub_dir2 (The dir of your sub_test.py in).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#parent_test.py</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## Method 1</span></span><br><span class="line"><span class="keyword">from</span> sub_dir1 <span class="keyword">import</span> sub_file</span><br><span class="line">sub_file.sub_fun() </span><br><span class="line"></span><br><span class="line"><span class="comment">## Method 2</span></span><br><span class="line"><span class="keyword">from</span> sub_dir.sub_file <span class="keyword">import</span> sub_fun</span><br><span class="line">sub_fun()</span><br><span class="line"></span><br><span class="line"><span class="comment">## Method 3</span></span><br><span class="line"><span class="keyword">import</span> sub_dir.sub_file <span class="keyword">as</span> sub_file</span><br><span class="line">sub_file.sub_fun()</span><br></pre></td></tr></table></figure><h2 id="6-Supplementary"><a href="#6-Supplementary" class="headerlink" title="6 Supplementary"></a>6 Supplementary</h2><h3 id="6-1-init-py"><a href="#6-1-init-py" class="headerlink" title="6.1 __init__.py"></a>6.1 <code>__init__.py</code></h3><p>Usually, we need to create a blank <code>__init__.py</code> file in our dir of .py file to be imported. However, in my experiments (python 3.9.7 as interpreter), all above 4 types work well without <code>__init__.py</code>.</p><h3 id="6-2-How-import-works"><a href="#6-2-How-import-works" class="headerlink" title="6.2 How import works?"></a>6.2 How <em>import</em> works?</h3><p>Please see the following experiment results.<br><img src="https://live.staticflickr.com/65535/52047807397_d9a4c4ec77_c.jpg"></p><h3 id="6-3-Path"><a href="#6-3-Path" class="headerlink" title="6.3 Path"></a>6.3 Path</h3><p><code>sys.path.append()</code> is used to add new path to the default path.<br><img src="https://live.staticflickr.com/65535/52047837807_3e6328554e_h.jpg" alt="sys_path"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(LiziX) D:\research\programming\python\python_import\parent_dir\sub_dir2&gt;python</span><br><span class="line">Python 3.9.7 (default, Sep 16 2021, 16:59:28) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; print(sys.path)</span><br><span class="line">[&#x27;&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\python39.zip&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\DLLs&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\win32&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\win32\\lib&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\Pythonwin&#x27;]</span><br><span class="line">&gt;&gt;&gt; sys.path.append(&quot;D:\\software\\anaconda\\next\\envs\\LiziX\\python39.zip&quot;)</span><br><span class="line">&gt;&gt;&gt; print(sys.path)</span><br><span class="line">[&#x27;&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\python39.zip&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\DLLs&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\win32&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\win32\\lib&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\lib\\site-packages\\Pythonwin&#x27;, &#x27;D:\\software\\anaconda\\next\\envs\\LiziX\\python39.zip&#x27;]</span><br><span class="line">&gt;&gt;&gt; ^Z</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Use XX.py file as module in four typical situations. Some specifial details will also be described.</summary>
    
    
    
    <category term="Programming" scheme="https://burjlizix.com/categories/Programming/"/>
    
    
    <category term="Programming" scheme="https://burjlizix.com/tags/Programming/"/>
    
  </entry>
  
  <entry>
    <title>RDF Basics</title>
    <link href="https://burjlizix.com/2022/02/09/RDF-Basics/"/>
    <id>https://burjlizix.com/2022/02/09/RDF-Basics/</id>
    <published>2022-02-09T09:13:17.000Z</published>
    <updated>2022-02-09T09:17:33.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/65535/51870294447_3579f94a67_k.jpg" alt="RDF Basics"></p>]]></content>
    
    
    <summary type="html">RDF basic ideas, RDF XML-based syntax</summary>
    
    
    
    <category term="Intelligent Web-ECE 627" scheme="https://burjlizix.com/categories/Intelligent-Web-ECE-627/"/>
    
    
    <category term="rdf" scheme="https://burjlizix.com/tags/rdf/"/>
    
    <category term="xml" scheme="https://burjlizix.com/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>XML</title>
    <link href="https://burjlizix.com/2022/02/09/XML/"/>
    <id>https://burjlizix.com/2022/02/09/XML/</id>
    <published>2022-02-09T02:42:14.000Z</published>
    <updated>2022-02-09T02:48:09.442Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/65535/51869891247_1a7534fe55_k.jpg" alt="XML"></p>]]></content>
    
    
    <summary type="html">xml, DTD, xml Schema</summary>
    
    
    
    <category term="Intelligent Web-ECE 627" scheme="https://burjlizix.com/categories/Intelligent-Web-ECE-627/"/>
    
    
    <category term="xml" scheme="https://burjlizix.com/tags/xml/"/>
    
    <category term="xml Schema" scheme="https://burjlizix.com/tags/xml-Schema/"/>
    
    <category term="DTD" scheme="https://burjlizix.com/tags/DTD/"/>
    
  </entry>
  
  <entry>
    <title>Optimization Settings for Hexo</title>
    <link href="https://burjlizix.com/2022/01/30/Optimization-Settings-for-Hexo/"/>
    <id>https://burjlizix.com/2022/01/30/Optimization-Settings-for-Hexo/</id>
    <published>2022-01-30T02:00:31.000Z</published>
    <updated>2022-01-30T03:14:00.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h2><h3 id="Add-Tags"><a href="#Add-Tags" class="headerlink" title="Add Tags"></a>Add Tags</h3><ul><li><p>Git Bash in <code>./blog/</code> and run command</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new pages tags</span><br></pre></td></tr></table></figure></li><li><p>If successful</p><blockquote><p>INFO  Validating config<br>INFO  Created: D:\Blog\source\tags\index.md</p></blockquote></li><li><p>Open index.md. It looks like<br><img src="https://live.staticflickr.com/65535/51851625210_39a0a163a1_c.jpg"></p></li><li><p>Add <code>tpye: tags</code> in the last line, store and close index.md.<br><img src="https://live.staticflickr.com/65535/51851038853_e1c8e01220_z.jpg"></p></li><li><p>When writing a post, add tags in the front-matter,e.g.,<code>tags: hexo</code>.<br><img src="https://live.staticflickr.com/65535/51851075168_cbc2cb849a_b.jpg"></p></li><li><p>Display<br><img src="https://live.staticflickr.com/65535/51851060708_249c43b3b5_k.jpg"></p></li></ul><h3 id="Multi-tags"><a href="#Multi-tags" class="headerlink" title="Multi-tags"></a>Multi-tags</h3><p>use <code>tags: [tag1, tag2, tag3,...]</code> to add multi-tags.</p><h2 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h2><p>Similar to tags setting.</p><ul><li><p>Git Bash in <code>./blog/</code> and run command</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new pages categories</span><br></pre></td></tr></table></figure></li><li><p>If successful:</p><blockquote><p>INFO  Validating config<br>INFO  Created: D:\Blog\source\categories\index-1.md</p></blockquote></li><li><p>Open index.md. It looks like<br><img src="https://live.staticflickr.com/65535/51851038878_55cf2b73b7_z.jpg"></p></li><li><p>Add <code>tpye: categories</code> in the last line, store and close index.md.<br><img src="https://live.staticflickr.com/65535/51850005852_f02463243f.jpg"></p></li><li><p>When writing a post, add categories in the front-matter,e.g.,<code>categories: Hexo</code>.<br><img src="https://live.staticflickr.com/65535/51851075203_2733256bef_b.jpg"></p></li><li><p>Display. It also presents the number of posts after category name.<br><img src="https://live.staticflickr.com/65535/51850991891_be84aec20a_k.jpg"></p></li></ul><h2 id="Read-More"><a href="#Read-More" class="headerlink" title="Read More"></a>Read More</h2><p>In the default setting, Every post presents the full text in a list in the home page. We can set only abstract visible in the home page and click <strong>Read more</strong> to read the full post.</p><ul><li>Add <code>description: XXX</code> in the front-matter.<br><img src="https://live.staticflickr.com/65535/51851075198_c6eef22184_b.jpg"></li><li>Display. Only abstract in a list.<br><img src="https://live.staticflickr.com/65535/51850074792_0b5f9416ad_k.jpg"></li></ul>]]></content>
    
    
    <summary type="html">Opimization Settings for Hexo - tags, categories, read more.</summary>
    
    
    
    <category term="Hexo" scheme="https://burjlizix.com/categories/Hexo/"/>
    
    
    <category term="hexo" scheme="https://burjlizix.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Intelligent Web - Introduction</title>
    <link href="https://burjlizix.com/2022/01/26/Intelligent-Web-Introduction/"/>
    <id>https://burjlizix.com/2022/01/26/Intelligent-Web-Introduction/</id>
    <published>2022-01-25T19:52:51.000Z</published>
    <updated>2022-01-30T01:55:33.904Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://live.staticflickr.com/65535/51843999139_b76cc440e5_k.jpg" alt="lec0 &amp; lec1"></p>]]></content>
    
    
    <summary type="html">In this category, we will focus on Course of ECE 627 by Dr. Marek Reformat. Intelligent web, a new field to learn. Here is introduction of intelligent web in this first post.</summary>
    
    
    
    <category term="Intelligent Web-ECE 627" scheme="https://burjlizix.com/categories/Intelligent-Web-ECE-627/"/>
    
    
    <category term="intelligent web" scheme="https://burjlizix.com/tags/intelligent-web/"/>
    
    <category term="ontonogy" scheme="https://burjlizix.com/tags/ontonogy/"/>
    
    <category term="semantic web" scheme="https://burjlizix.com/tags/semantic-web/"/>
    
  </entry>
  
  <entry>
    <title>Begin with Markdown 3 Diagrams</title>
    <link href="https://burjlizix.com/2022/01/18/Begin-with-Markdown-3-Diagrams/"/>
    <id>https://burjlizix.com/2022/01/18/Begin-with-Markdown-3-Diagrams/</id>
    <published>2022-01-18T03:53:53.000Z</published>
    <updated>2022-01-30T01:29:46.703Z</updated>
    
    <content type="html"><![CDATA[<p>Mermaid and flow create diagrams.</p><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><h3 id="Pie"><a href="#Pie" class="headerlink" title="Pie"></a>Pie</h3><ul><li><p>Start with <code>```mermaid</code>. Three elements:</p><ul><li>type: <code>pie</code></li><li>title: no ‘:’</li><li>content and number</li></ul></li><li><p>Codes</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">pie</span></span><br><span class="line"><span class="code">    title LYX is ACE</span></span><br><span class="line"><span class="code">    &quot;Dance&quot;: 100</span></span><br><span class="line"><span class="code">    &quot;Sing&quot;: 90</span></span><br><span class="line"><span class="code">    &quot;Rap&quot;: 95</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--![pie](<https://live.staticflickr.com/65535/51824579487_0a807a3505_b.jpg =100)--><ul><li>Result</li></ul><div  align="center"> <img src=https://live.staticflickr.com/65535/51824579487_0a807a3505_b.jpg width = "230"  alt="Pie" align=center /></div><h3 id="Gantt"><a href="#Gantt" class="headerlink" title="Gantt"></a>Gantt</h3><ul><li><p>Start with <code>```mermaid</code>. Four elements:</p><ul><li><p>type: <code>gantt</code></p></li><li><p>title: no ‘:’ after ‘title’</p></li><li><p>dataFormat: no ‘:’ after ‘dataFormat’</p></li><li><p>section: no ‘:’ after ‘section’</p><ul><li><p>task name: no space after ‘task:’</p></li><li><p>state: 4states</p><table><thead><tr><th>state</th><th>meaning</th></tr></thead><tbody><tr><td>done</td><td>did/have done</td></tr><tr><td>active</td><td>be doing</td></tr><tr><td>blank</td><td>be to do</td></tr><tr><td>crit</td><td>important task</td></tr></tbody></table></li><li><p>id</p></li><li><p>starting date</p></li><li><p>ending date/length</p></li></ul></li></ul></li><li><p>Code</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">gantt</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    title LYX&#x27;s Performances in YouthWithYou II</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section syntax</span></span><br><span class="line"><span class="code">    task1-done      :done, des1,2020-03-12,2020-04-01</span></span><br><span class="line"><span class="code">    task2-be doing  :active, des2, after des1, 15d</span></span><br><span class="line"><span class="code">    task3-important :crit,des3, 2020-04-10, 30d</span></span><br><span class="line"><span class="code">    task4-be to do  :des4,2020-05-08,17d</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    section 1st stage</span></span><br><span class="line"><span class="code">    《No joke》        :done, des1, 2020-03-12,2020-03-19</span></span><br><span class="line"><span class="code">    《破风(The Eve)》   :active, des2, after des1, 6d</span></span><br><span class="line"><span class="code">    《想见你*3》        :done,des3,2020-03-25,12d</span></span><br><span class="line"><span class="code">    section 2nd stage</span></span><br><span class="line"><span class="code">    《十面埋伏2 》      :des4, after des3, 7d</span></span><br><span class="line"><span class="code">    《Lion》           :des5, after des4, 12d</span></span><br><span class="line"><span class="code">    《溯》             :des6, after des5, 9d</span></span><br><span class="line"><span class="code">    《I&#x27;m not yours》  :des7, after des6, 8d</span></span><br><span class="line"><span class="code">    section 3rd stage</span></span><br><span class="line"><span class="code">    Center of The 9    :crit,des8,2020-05-30,1d</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><ul><li>Result</li></ul><!--here is image of gantt result--><p><img src="https://live.staticflickr.com/65535/51824722392_6259a6a25c_h.jpg" alt="Gantt"></p><h3 id="Flowchart"><a href="#Flowchart" class="headerlink" title="Flowchart"></a>Flowchart</h3><h4 id="Shape"><a href="#Shape" class="headerlink" title="Shape"></a>Shape</h4><p>Variable shapes with different symbols.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph TB</span></span><br><span class="line"><span class="code">    A</span></span><br><span class="line"><span class="code">    B[nameB]</span></span><br><span class="line"><span class="code">    C(nameC)</span></span><br><span class="line"><span class="code">    D((nameD))</span></span><br><span class="line"><span class="code">    E&gt;nameeE]</span></span><br><span class="line"><span class="code">    F&#123;nameF&#125;</span></span><br><span class="line"><span class="code">    G[(nameG)]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is the image of shape --><p><img src="https://live.staticflickr.com/65535/51826394390_e0a122dd25_h.jpg" alt="Shape"></p><h4 id="Ralations-from-top-to-bottom"><a href="#Ralations-from-top-to-bottom" class="headerlink" title="Ralations from top to bottom"></a>Ralations from top to bottom</h4><p>Variable connecting types with different points, lines and arrows.</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``` mermaid</span></span><br><span class="line"><span class="code">graph TB</span></span><br><span class="line"><span class="code">    %%this is a commet, you can&#x27;t see me.</span></span><br><span class="line"><span class="code">    A1--&gt;B1</span></span><br><span class="line"><span class="code">    A2---B2</span></span><br><span class="line"><span class="code">    A3-.-&gt;B3</span></span><br><span class="line"><span class="code">    A4-.-B4</span></span><br><span class="line"><span class="code">    A5==&gt;B5</span></span><br><span class="line"><span class="code">    A6===B6</span></span><br><span class="line"><span class="code">    A7--text7--&gt;B7</span></span><br><span class="line"><span class="code">    A8--text8---B8</span></span><br><span class="line"><span class="code">    A9-.text9.-&gt;B9</span></span><br><span class="line"><span class="code">    A10==text10==&gt;B10-.text2.-B2</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is te image of TB --><p><img src="https://live.staticflickr.com/65535/51825780498_9f49be9d23_h.jpg" alt="Basic unit of TopBottom"></p><h4 id="Relations-from-left-to-right"><a href="#Relations-from-left-to-right" class="headerlink" title="Relations from left to right"></a>Relations from left to right</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph LR</span></span><br><span class="line"><span class="code">    A1--&gt;B1</span></span><br><span class="line"><span class="code">    A2-.-&gt;B2</span></span><br><span class="line"><span class="code">    A3==&gt;B3</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is the image of LR --><div  align="center"> <img src=https://live.staticflickr.com/65535/51826014729_0f18c628b7_z.jpg width = "100"  alt="Basic unit of LR" align=center /></div><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><ul><li>example of binary tree (bt)<br>Take DLR of bt as an example.In this tree diagram, the uppercase means different nodes of binary tree. The number means order of traversing. Circles with “none” mean there’s nothing, just to adjust the position of left and right nodes.</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph TB</span></span><br><span class="line"><span class="code">    A((A_1))---B((B_2))</span></span><br><span class="line"><span class="code">    B((B_2))---D((D_3))</span></span><br><span class="line"><span class="code">    B((B_2))---F((F_4))</span></span><br><span class="line"><span class="code">    F((F_4))-.-J((null))</span></span><br><span class="line"><span class="code">    F((F_4))---E((E_5))</span></span><br><span class="line"><span class="code">    A((A_1))---C((C_6))</span></span><br><span class="line"><span class="code">    C((C_6))---G((G_7))</span></span><br><span class="line"><span class="code">    G((G_7))---H((H_8))</span></span><br><span class="line"><span class="code">    G((G_7))-.-K((null))</span></span><br><span class="line"><span class="code">    C((C_6))---I((I_9))</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is the image of binary tree --><div  align="center"> <img src=https://live.staticflickr.com/65535/51824722362_05e87b2426_b.jpg width = "250"  alt="DLR algorithm of bt" align=center /></div><ul><li>example of flowchart</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph LR</span></span><br><span class="line"><span class="code">    A(Start)--&gt;Z[/time=23:30/]</span></span><br><span class="line"><span class="code">    Z--&gt;B[go to sleep]</span></span><br><span class="line"><span class="code">    B--&gt;C&#123;asleep?&#125;</span></span><br><span class="line"><span class="code">    C--Yes--&gt;Y[/good dream/]</span></span><br><span class="line"><span class="code">    Y--&gt;E(end)</span></span><br><span class="line"><span class="code">    C--No--&gt;D[listen to music]</span></span><br><span class="line"><span class="code">    D--&gt;F&#123;asleep?&#125;</span></span><br><span class="line"><span class="code">    F--Yes--&gt;Y</span></span><br><span class="line"><span class="code">    F--No--&gt;X[read The Economist]</span></span><br><span class="line"><span class="code">    X--&gt;G&#123;sleepy?&#125;</span></span><br><span class="line"><span class="code">    G--Yes--&gt;Y</span></span><br><span class="line"><span class="code">    G--No--&gt;W[/that&#x27;s terrible!/]</span></span><br><span class="line"><span class="code">    W--&gt;E</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is the image of binry tree --><p><img src="https://live.staticflickr.com/65535/51824722347_936d9a1921_h.jpg" alt="Example of flowchart with mermaid"></p><p>We can see that mermaid has some limits when make charts through above example. For instance, it can’t create specific left and right node of tree. It looks good with common flowchart but seems a little weird with algorithm flowchart. Here’s another method to draw a flowchart with syntax and structure of flow in the following section.</p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>Elements include start, inputoutput, operation, condition and end, see above.<br>syntax:</p><ul><li><code>DefName=&gt;keyword: text description</code></li><li><code>defName1-&gt;Defname2</code></li><li><code>CondName(yes/no)-&gt;Defname</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```flow</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    st=&gt;start: start </span></span><br><span class="line"><span class="code">    in=&gt;inputoutput: input</span></span><br><span class="line"><span class="code">    op1=&gt;operation: operation1</span></span><br><span class="line"><span class="code">    cond=&gt;condition: Yes or No?</span></span><br><span class="line"><span class="code">    op2=&gt;operation: operation2</span></span><br><span class="line"><span class="code">    ou=&gt;inputoutput: output</span></span><br><span class="line"><span class="code">    ed=&gt;end: End</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    st-&gt;in-&gt;op1-&gt;cond</span></span><br><span class="line"><span class="code">    cond(yes)-&gt;op2</span></span><br><span class="line"><span class="code">    op2-&gt;op1</span></span><br><span class="line"><span class="code">    cond(no)-&gt;ou-&gt;ed</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--here is the image of flow --><div  align="center"> <img src=https://live.staticflickr.com/65535/51826014699_c5cce4a221_b.jpg width = "250"  alt="Example of Flow" align=center /></div>]]></content>
    
    
    <summary type="html">This is the last one of three markdown posts. We create graphs with markdown here, e.g., pie, gantt, flowchart, mermaid.</summary>
    
    
    
    <category term="Markdown" scheme="https://burjlizix.com/categories/Markdown/"/>
    
    
    <category term="markdown" scheme="https://burjlizix.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Begin with Markdown 2</title>
    <link href="https://burjlizix.com/2022/01/17/Begin-with-Markdown-2/"/>
    <id>https://burjlizix.com/2022/01/17/Begin-with-Markdown-2/</id>
    <published>2022-01-17T05:13:31.000Z</published>
    <updated>2022-01-30T01:13:28.862Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><img src="https://live.staticflickr.com/65535/51826686552_d2d0f2d60e_h.jpg"></p><p>&lt; !–more–&gt;</p><h2 id="Content"><a href="#Content" class="headerlink" title="Content"></a>Content</h2><p>Put <code>[TOC]</code> in the position where you want to generate content. This it can caputere headings(heading 1-6) automaticly.</p><h2 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|heading one|heading two| headng three|</span><br><span class="line">|:---|---:|:---:|</span><br><span class="line">|:- left|-: right|:-: center|</span><br><span class="line">|&gt;|a|b|</span><br><span class="line">|a|&gt;|b|</span><br><span class="line">|a|b|&gt;|</span><br><span class="line">|^|c|d|</span><br><span class="line">|c|^|d|</span><br><span class="line">|c|d|^|</span><br></pre></td></tr></table></figure><div align="center"><img src=https://live.staticflickr.com/65535/51826686572_23b193284b_c.jpg width=300 align=center /></div><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><h3 id="Inline"><a href="#Inline" class="headerlink" title="Inline"></a>Inline</h3><p>Embed code into text and sentences with ‘``’. text <code>your code/command</code> text.</p><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><h4 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```language &#123;cmd=yourcmd, option1=value1, op2=v2,...&#125;</span></span><br><span class="line"><span class="code">...code...</span></span><br><span class="line"><span class="code">code...</span></span><br><span class="line"><span class="code">...</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>options:</p><ul><li>cmd: do you run the code? (if running, there will be results)</li><li>hide: do you hide the code?</li><li>output: html/text/markdown/png</li><li>other options</li></ul><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><ol><li>default(no commands)</li></ol><p>source code:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">print(&quot;hello world&quot;)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>display after markdown rendering:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>run code</li></ol><!--here is the image of setting run code--><p><img src="https://live.staticflickr.com/65535/51827610506_edd815127d_h.jpg" alt="Enable Script Excution"><br>source code:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python &#123;cmd=true&#125;</span></span><br><span class="line"><span class="code">print(&quot;hello world&quot;)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>display after markdown rendering:</p><p><img src="https://live.staticflickr.com/65535/51827742038_a99bd51661_h.jpg" alt=" "></p><ol start="3"><li>run and hide code (only display running results)</li></ol><p>source code:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python &#123;cmd hide&#125;s</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">def bubble_sort_v3(array =[]):</span></span><br><span class="line"><span class="code">    last_exchange_index = len(array)-1</span></span><br><span class="line"><span class="code">    for i in range(len(array)-1):</span></span><br><span class="line"><span class="code">        for j in range(last_exchange_index):</span></span><br><span class="line"><span class="code">            if array[j] &gt; array[j+1]:</span></span><br><span class="line"><span class="code">                temp = array[j]</span></span><br><span class="line"><span class="code">                array[j] = array[j+1]</span></span><br><span class="line"><span class="code">                array[j+1] = temp</span></span><br><span class="line"><span class="code">                last_exchange_index = j # important </span></span><br><span class="line"><span class="code">     </span></span><br><span class="line"><span class="code">        if last_exchange_index == 0:</span></span><br><span class="line"><span class="code">            break</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">my_array = [-1, 5, 3, -1, 6, 7, 8, 2, 2, -14, 10, 12]</span></span><br><span class="line"><span class="code">bubble_sort_v3(my_array)</span></span><br><span class="line"><span class="code">print(my_array)</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p><img src="https://live.staticflickr.com/65535/51827632531_b68b38b1f0_h.jpg" alt=" "></p><ol start="4"><li>matplotlib</li></ol><ul><li>set <code>matplotlib=true</code></li><li>cmd=true/your_interpreter_path<br>source code:</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python &#123;cmd=&quot;D:/software/anaconda/next/envs/LiziX/python.exe&quot; matplotlib=true&#125;</span></span><br><span class="line"><span class="code">import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="code">plt.plot([1,2,3,6, 10])</span></span><br><span class="line"><span class="code">plt.show()</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><div align='center'><img src=https://live.staticflickr.com/65535/51828358160_717b3228ca_b.jpg width=300 align=center /></div><h4 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h4><p>source code:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```bash</span></span><br><span class="line"><span class="code">hexo s</span></span><br><span class="line"><span class="code">hexo clean</span></span><br><span class="line"><span class="code">hexo d -g</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>display after markdown rendering:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure><h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><p>Plase click <a href="https://burjlizix.com/2022/01/16/Begin-with-Markdown-3-Diagrams/">blog 3</a>.</p><h4 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h4><ul><li>support LaTex math syntax</li><li>inline: <code>$math_formula$</code> or <code>\(math_formula\)</code></li><li>block: <code>$$math_formula$$</code> or <code>\[math_formula\]</code></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```markdown</span></span><br><span class="line"><span class="code">$r(\theta) = 1-sin(\theta)$</span></span><br><span class="line"><span class="code">\(r(\theta) = 1-sin(\theta)\)</span></span><br><span class="line"><span class="code">$$r(\theta) = 1-sin(\theta)$$</span></span><br><span class="line"><span class="code">\[r(\theta) = 1-sin(\theta)\]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><!--$r(\theta) = 1-sin(\theta)$\(r(\theta) = 1-sin(\theta)\)$$r(\theta) = 1-sin(\theta)$$\[r(\theta) = 1-sin(\theta)\]--><p><img src="https://live.staticflickr.com/65535/51826686522_145837bfd5_h.jpg" alt=" "></p>]]></content>
    
    
    <summary type="html">In this blog, we introduce content, table, and code for markdown. We will quote and run code in markdown rendering tools.</summary>
    
    
    
    <category term="Markdown" scheme="https://burjlizix.com/categories/Markdown/"/>
    
    
    <category term="markdown" scheme="https://burjlizix.com/tags/markdown/"/>
    
  </entry>
  
</feed>
